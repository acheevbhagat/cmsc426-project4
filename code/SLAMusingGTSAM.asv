function [LandMarksComputed, AllPosesComputed] = SLAMusingGTSAM(DetAll, K, TagSize, qIMUToC, TIMUToC,...
                                                IMU, Mode)
    % For Input and Output specifications refer to the project pdf

    import gtsam.*
    % Refer to Factor Graphs and GTSAM Introduction
    % https://research.cc.gatech.edu/borg/sites/edu.borg/files/downloads/gtsam.pdf
    % and the examples in the library in the GTSAM toolkit. See folder
    % gtsam_toolbox/gtsam_examples

    
    graph = NonlinearFactorGraph;
    poses = []
    % Load frames containing April tags
    frames_folder = '../MappingFrames/MappingFrames/';
    file_pattern = fullfile(frames_folder, '*.jpg');
    frame_files = dir(file_pattern);
    numfiles = length(frame_files);
    frames = cell(numfiles);
    for i = 1:numfiles
        frame = imread(fullfile(frames_folder, frame_files(i).name));
        frames{i} = frame;
    end
    
    % Load mapping data
    frame_one_detections = DetAll{1};
    
    % Detection data stores as [TagID, p1x, p1y, p2x, p2y, p3x, p3y, p4x, p4y]
    first_col = frame_one_detections(:, 1);
    tag_10_data = frame_one_detections(first_col == 10, :);
    p1x = tag_10_data(2);
    p1y = tag_10_data(3);
    p2x = tag_10_data(4);
    p2y = tag_10_data(5);
    p3x = tag_10_data(6);
    p3y = tag_10_data(7);
    p4x = tag_10_data(8);
    p4y = tag_10_data(9);
    tag_10_coords = [p1x p1y; p2x p2y; p3x p3y; p4x p4y];
    origin_coords = [0 0; TagSize 0; TagSize TagSize; 0 TagSize];
%     tag_10_coords = [[p1x p2x 1]' [p2x p2y 1]' [p3x p3y 1]' [p4x p4y 1]'];
%     origin_coords = [[0 0 1]' [TagSize 0 1]' [TagSize TagSize 1]' [0 TagSize 1]'];
    
    % Initialize camera pose by calculating homography
    tform = estimateGeometricTransform(tag_10_coords, origin_coords, 'projective')
    KH = tform.T;
%     H = homography2d(inv(K) * tag_10_coords, origin_coords)
%     H * tag_10_coords(:, 1)
    H = K \ KH % Equivalent to H = inv(K) * KH
    [x1, y1] = transformPointsForward(tform, p1x, p1y);
    [x2, y2] = transformPointsForward(tform, p2x, p2y);
    [x3, y3] = transformPointsForward(tform, p3x, p3y);
    [x4, y4] = transformPointsForward(tform, p4x, p4y);
    h_1 = H(:, 1);
    h_2 = H(:, 2);
    h_3 = H(:, 3);
    % SVD on H to find the Rotation (R) and Translation (T) values for pose
    [U, S, V] = svd([h_1 h_2 cross(h_1, h_2)]);
    R = U * [1 0 0; 0 1 0; 0 0 det(U * V')] * V';
    T = h_3 / norm(h_1);
    pose = [R T]
    poses = [poses pose]
    
    world_frame_coords = [10, 0, 0, TagSize, 0, TagSize, TagSize, 0, TagSize];
    %imshow(frames{1});
    hold on;
    for i = 1:size(frame_one_detections, 1)
        tag_data = frame_one_detections(i, :);
        p1x = tag_data(2);
        p1y = tag_data(3);
        p2x = tag_data(4);
        p2y = tag_data(5);
        p3x = tag_data(6);
        p3y = tag_data(7);
        p4x = tag_data(8);
        p4y = tag_data(9);
        tag_xs = [p1x p2x p3x p4x];
        tag_ys = [p1y p2y p3y p4y];
        tag_coords = [tag_xs; tag_ys; 1 1 1 1];
        cur_world_coords = inv(H) * tag_coords;
        % Code to check homography accuracy
        %[xs, ys] = transformPointsForward(tform, tag_xs', tag_ys');
        %H_check = [H_check; xs(1), ys(1), xs(2), ys(2), xs(3), ys(3), xs(4), ys(4)];\
        plot([cur_world_coords(1, :) cur_world_coords(1, 1)], ...
            [cur_world_coords(2, :) cur_world_coords(2, 1)], 'b-', 'LineWidth', 2);
    end
    hold off;
    
    % Run through the images and update on each image
    for i = 2:numfiles
        % Find common landmarks between the frames
        currLandmarks = DetAll{i};
        prevLandmarks = DetAll{i - 1};
        commonTags = [];
        for j = 1:size(currLandmarks, 1)
            currLandmarkID = currLandmarks(j, 1);
            for k = 1:size(prevLandmarks, 1)
                prevLandmarkID = prevLandmarks(k, 1);
                if currLandmarkID == prevLandmarkID
                    commonTags = [commonTags currLandmarkID];
                    break;
                end
            end
        end
        % Calculate homography between all sets of landmarks
        % Pull out landmark information for each landmark
        currInfo = []
        prevInfo = []
        currFirstCol = currLandMark(:, 1);
        prevFirstCol = prevLandMark(:, 1);
        for j = 1:length(commonTags);
            currInfoVec = currLandMark(currFirstCol == commonTags(i), :);
            prevInfoVec = prevLandMark(prevFirstCol == commonTags(i), :);
            currInfo = [currInfo; currInfoVec];
            prevInfo = [prevInfo; prevInfoVec0;
        end
    end
    
end
